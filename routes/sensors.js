const express = require('express');
const { body } = require('express-validator');
const { auth } = require('../src/middleware/auth');
const sensorController = require('../src/controllers/sensorController');
const validateRequest = require('../src/middleware/validateRequest');

const router = express.Router();

/**
 * @swagger
 * /api/sensors:
 *   get:
 *     summary: Get all sensors for the authenticated user
 *     tags: [Sensors]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: List of sensors
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   id:
 *                     type: string
 *                     format: uuid
 *                   name:
 *                     type: string
 *                   location:
 *                     type: string
 *                   isActive:
 *                     type: boolean
 *                   lastReading:
 *                     type: object
 *                     properties:
 *                       temperature:
 *                         type: number
 *                         format: float
 *                       humidity:
 *                         type: number
 *                         format: float
 *                       timestamp:
 *                         type: string
 *                         format: date-time
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Server error
 */
router.get('/', auth, sensorController.getUserSensors);

/**
 * @swagger
 * /api/sensors:
 *   post:
 *     summary: Create a new sensor
 *     tags: [Sensors]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - id
 *               - name
 *             properties:
 *               id:
 *                 type: string
 *                 format: uuid
 *                 description: UUID generated by the frontend
 *               name:
 *                 type: string
 *                 description: Name of the sensor
 *     responses:
 *       201:
 *         description: Sensor created successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 id:
 *                   type: string
 *                   format: uuid
 *                 name:
 *                   type: string
 *                 userId:
 *                   type: string
 *                   format: uuid
 *       400:
 *         description: Invalid request or UUID format
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Server error
 */
router.post(
  '/',
  auth,
  [
    body('id').isUUID().withMessage('Invalid UUID format'),
    body('name').notEmpty().withMessage('Sensor name is required'),
  ],
  validateRequest,
  sensorController.createSensor,
);

/**
 * @swagger
 * /api/sensors/name:
 *   put:
 *     summary: Update the name of a sensor
 *     tags: [Sensors]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - sensorId
 *               - name
 *             properties:
 *               sensorId:
 *                 type: string
 *                 description: ID of the sensor to update
 *               name:
 *                 type: string
 *                 description: New name for the sensor
 *     responses:
 *       200:
 *         description: Sensor name updated successfully
 *       400:
 *         description: Invalid request
 *       404:
 *         description: Sensor not found
 */
router.put(
  '/sensors/name',
  auth,
  [
    body('sensorId').notEmpty().withMessage('Sensor ID is required'),
    body('name').notEmpty().withMessage('Sensor name is required'),
  ],
  validateRequest,
  sensorController.updateSensorName,
);

module.exports = router;
